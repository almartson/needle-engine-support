import{_ as o,M as c,p,q as i,R as n,t as s,N as e,a1 as t}from"./framework-1a844b00.js";const l={},r=n("h1",{id:"networking",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#networking","aria-hidden":"true"},"#"),s(" Networking")],-1),u=n("code",null,"this.context.connection",-1),d={href:"https://glitch.com/edit/#!/needle-tiny-server",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/jjxxs/websocket-ts",target:"_blank",rel:"noopener noreferrer"},m={href:"https://google.github.io/flatbuffers/",target:"_blank",rel:"noopener noreferrer"},h=t(`<h2 id="using-multiplayer" tabindex="-1"><a class="header-anchor" href="#using-multiplayer" aria-hidden="true">#</a> Using Multiplayer</h2><ul><li><p><strong>Enable Networking</strong><br> Add a <code>SyncedRoom</code> component.</p></li><li><p><strong>Enable Desktop Viewer Sync</strong><br> Add a <code>SyncedCamera</code> component.</p></li><li><p><strong>Enable XR Avatar Sync</strong><br> Add a <code>WebXRSync</code> component.</p></li><li><p><strong>Enable Voice Chat</strong><br> Add a <code>VoIP</code> component.</p></li><li><p><strong>Enable Screensharing</strong><br> Add a <code>ScreenCapture</code> component.</p></li></ul><h2 id="core-components" tabindex="-1"><a class="header-anchor" href="#core-components" aria-hidden="true">#</a> Core Components</h2><ul><li><code>SyncedRoom</code> — handles networking connection and connection to a room.<br> This can also be done by code using the networking api accessible from <code>this.context.connection</code></li><li><code>SyncedTransform</code> — handles synchronizing transforms</li><li><code>SyncedCamera</code> — spawns a prefab for any user connected to the room which will follow their position</li><li><code>WebXRSync</code> — handles synchronization for AR and VR users</li><li><code>VoIP</code> — handles voice-over-IP audio connections, microphone access etc. between users</li><li><code>Networking</code> — use to customize the server backend url</li></ul><h2 id="manual-networking" tabindex="-1"><a class="header-anchor" href="#manual-networking" aria-hidden="true">#</a> Manual Networking</h2><h3 id="sending" tabindex="-1"><a class="header-anchor" href="#sending" aria-hidden="true">#</a> Sending</h3><p>Send a json message to all users in the same room:<br><code>this.context.connection.send(key:string, data: IModel | object | boolean | string | number | null)</code></p><p>Send a flatbuffer binary array to all users in the same room:<br><code>this.context.connect.sendBinary(arr:Uint8Array)</code></p><h4 id="persistence" tabindex="-1"><a class="header-anchor" href="#persistence" aria-hidden="true">#</a> Persistence</h4><p>When sending an object containing a <code>guid</code> field it will be saved in the persistant storage and automatically sent to users that connect later or come back later to the site (e.g. to restore state).<br> To delete state for a specific guid from the backend storage you can use <code>delete-state</code> as the key and provide an object with <code>{ guid: &quot;guid_to_delete&quot; } </code></p><h3 id="receiving" tabindex="-1"><a class="header-anchor" href="#receiving" aria-hidden="true">#</a> Receiving</h3><p>Subscribe to json events / listen to events in the room using a specific key<br><code>this.context.connection.beginListen(key:string, callback:(data) =&gt; void)</code><br> Unsubscribe with <code>stopListening</code></p><p>Subscribe to flatbuffer binary events<br><code>this.context.connection.beginListenBinrary(identifier:string, callback:(data : ByteBuffer) =&gt; void)</code><br> Unsubscribe with <code>stopListenBinary</code></p><h2 id="auto-networking-experimental" tabindex="-1"><a class="header-anchor" href="#auto-networking-experimental" aria-hidden="true">#</a> Auto Networking (experimental)</h2><p>To automatically network fields in a component you can just decorate a field with a <code>@syncField()</code> decorator (note: you need to have <code>experimentalDecorators: true</code> in your <code>tsconfig.json</code> file for it to work)</p><details class="custom-container details"><summary>Example Code</summary><p><em>Automatically network a color field. The following script also changes the color randomly on click</em></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> IPointerClickHandler<span class="token punctuation">,</span> PointerEventData<span class="token punctuation">,</span> Renderer<span class="token punctuation">,</span> serializable<span class="token punctuation">,</span> syncField <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Color <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;three&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Networking_ClickToChangeColor</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token keyword">implements</span> <span class="token class-name">IPointerClickHandler</span> <span class="token punctuation">{</span>

    <span class="token comment">// START MARKER network color change syncField</span>
    <span class="token doc-comment comment">/** syncField does automatically send a property value when it changes */</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">syncField</span></span><span class="token punctuation">(</span>Networking_ClickToChangeColor<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>onColorChanged<span class="token punctuation">)</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span>
    color<span class="token operator">:</span> Color<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">onColorChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// syncField will network the color as a number, so we need to convert it back to a Color when we receive it</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setColorToMaterials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// END MARKER network color change syncField</span>

    <span class="token doc-comment comment">/** called when the object is clicked and does generate a random color */</span>
    <span class="token function">onPointerClick</span><span class="token punctuation">(</span>_<span class="token operator">:</span> PointerEventData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> randomColor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> randomColor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">onEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setColorToMaterials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token function">setColorToMaterials</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span>Renderer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>renderer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> renderer<span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// we clone the material so that we don&#39;t change the original material</span>
                <span class="token comment">// just for demonstration purposes, you can also change the original material</span>
                <span class="token keyword">const</span> mat <span class="token operator">=</span> renderer<span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                renderer<span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> mat<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>mat <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;color&quot;</span> <span class="token keyword">in</span> mat<span class="token punctuation">)</span>
                    mat<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;No renderer found&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="sample-code-links"><a href="https://github.com/needle-tools/needle-engine-samples/blob/docs/code-marker/package/Runtime/_Shared/SampleScripts~/Networking.ts#L2" target="_blank"><img src="https://img.shields.io/badge/View on-GitHub-green?style=flat-square" alt="View on GitHub"></a></div><p><em>Simple networking of a number</em></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> syncField <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AutoFieldSync</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token keyword">implements</span> <span class="token class-name">IPointerClickHandler</span> <span class="token punctuation">{</span>

    <span class="token comment">// Use \`@syncField\` to automatically network a field. </span>
    <span class="token comment">// You can optionally assign a method or method name to be called when the value changes</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">syncField</span></span><span class="token punctuation">(</span><span class="token string">&quot;myValueChanged&quot;</span><span class="token punctuation">)</span>
    mySyncedValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token keyword">private</span> <span class="token function">myValueChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;My value changed&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mySyncedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">onPointerClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>mySyncedValue <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="flatbuffers-for-your-own-components" tabindex="-1"><a class="header-anchor" href="#flatbuffers-for-your-own-components" aria-hidden="true">#</a> Flatbuffers for your own components</h2>`,17),b={href:"https://google.github.io/flatbuffers/flatbuffers_guide_using_schema_compiler.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://google.github.io/flatbuffers/flatbuffers_guide_use_typescript.html",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"networking-package",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#networking-package","aria-hidden":"true"},"#"),s(" Networking Package")],-1),y={href:"https://fwd.needle.tools/needle-engine/packages/needle-engine-networking",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"Networking",-1),_=t(`<p>It can be added to your own fastiy or express server running on any server for example by adding the following code on your server after installing the package:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> networking <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/needle-tiny-networking-ws&quot;</span><span class="token punctuation">;</span>
networking<span class="token punctuation">.</span><span class="token function">startServerFastify</span><span class="token punctuation">(</span>fastifyApp<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">endpoint</span><span class="token operator">:</span> <span class="token string">&quot;/socket&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The following options are available:</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><code>endpoint</code> <em>string</em></td><td>relative path to the websocket endpoint (e.g. <code>/socket</code>)</td></tr><tr><td><code>maxUsers</code> <em>number</em></td><td>Amount of users allowed per room</td></tr><tr><td><code>defaultUserTimeout</code> <em>number</em></td><td>Timeout length in seconds until a user is kicked from a room (if no ping is received). Defaults to 30 seconds</td></tr></tbody></table><h2 id="networking-on-glitch" tabindex="-1"><a class="header-anchor" href="#networking-on-glitch" aria-hidden="true">#</a> Networking on Glitch</h2><p>When deploying your app to Glitch, we include a simple networking backend that is great for prototyping and small deployments (~15-20 people at the same time). You can later update to a bigger/better/stronger networking solution if required.</p><h3 id="limitations" tabindex="-1"><a class="header-anchor" href="#limitations" aria-hidden="true">#</a> Limitations</h3><ul><li>approx. 15-20 people maximum – afterwards the small default Glitch server instance becomes slow</li></ul>`,8);function x(C,q){const a=c("ExternalLinkIcon");return p(),i("div",null,[r,n("p",null,[s("Access to core networking functionality can be obtained by using "),u,s(" from a component. "),n("a",d,[s("The built-in backend server"),e(a)]),s(" requires users to be connected to a room.")]),n("p",null,[s("Networking is currently based on "),n("a",k,[s("websockets"),e(a)]),s(" and sending either json strings (for infrequent updates) or "),n("a",m,[s("flatbuffers"),e(a)]),s(" (for frequent updates).")]),h,n("ul",null,[n("li",null,[n("a",b,[s("Using the schema compiler"),e(a)])]),n("li",null,[n("a",g,[s("Generating a schema"),e(a)])]),n("li",null,[n("a",v,[s("Flatbuffer in Typescript"),e(a)])])]),f,n("p",null,[s("Needle Engine currently uses its "),n("a",y,[s("own networking package"),e(a)]),s(" hosted on npm. By default if not configured differently using the "),w,s(" component Needle Engine will connect to a server running on Glitch.")]),_])}const N=o(l,[["render",x],["__file","networking.html.vue"]]);export{N as default};
