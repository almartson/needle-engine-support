import{_ as i,M as p,p as l,q as u,N as a,t as s,R as n,V as r,a1 as e}from"./framework-1a844b00.js";const k={},d=n("h1",{id:"script-examples",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#script-examples","aria-hidden":"true"},"#"),s(" Script Examples")],-1),v=n("h2",{id:"basic-component",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#basic-component","aria-hidden":"true"},"#"),s(" Basic component")],-1),m=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> serializable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Object3D <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;three&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>Object3D<span class="token punctuation">)</span>
    myObjectReference<span class="token operator">?</span><span class="token operator">:</span> Object3D<span class="token punctuation">;</span>

    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>see <a href="scripting#lifecycle-methods">scripting</a> for all component events</p><h2 id="reference-an-object-from-unity" tabindex="-1"><a class="header-anchor" href="#reference-an-object-from-unity" aria-hidden="true">#</a> Reference an Object from Unity</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> serializable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Object3D <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;three&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>
    <span class="token comment">// this will be a &quot;Transform&quot; field in Unity</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>Object3D<span class="token punctuation">)</span> 
    myObjectReference<span class="token operator">:</span> Object3D <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    
    <span class="token comment">// this will be a &quot;Transform&quot; array field in Unity</span>
    <span class="token comment">// Note that the @serializable decorator contains the array content type! (Object3D and not Object3D[])</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>Object3D<span class="token punctuation">)</span> 
    myObjectReferenceList<span class="token operator">:</span> Object3D<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference-and-load-an-asset-from-unity-prefab-or-sceneasset" tabindex="-1"><a class="header-anchor" href="#reference-and-load-an-asset-from-unity-prefab-or-sceneasset" aria-hidden="true">#</a> Reference and load an asset from Unity (Prefab or SceneAsset)</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> serializable<span class="token punctuation">,</span> AssetReference <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token comment">// if you export a prefab or scene as a reference from Unity you&#39;ll get a path to that asset</span>
    <span class="token comment">// which you can de-serialize to AssetReference for convenient loading</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>AssetReference<span class="token punctuation">)</span>
    myPrefab<span class="token operator">?</span><span class="token operator">:</span> AssetReference<span class="token punctuation">;</span>
    
    <span class="token keyword">async</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// directly instantiate</span>
      <span class="token keyword">const</span> myInstance <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myPrefab<span class="token operator">?.</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// you can also just load and instantiate later</span>
      <span class="token comment">// const myInstance = await this.myPrefab.loadAssetAsync();</span>
      <span class="token comment">// this.gameObject.add(myInstance)</span>
      <span class="token comment">// this is useful if you know that you want to load this asset only once because it will not create a copy</span>
      <span class="token comment">// since \`\`instantiate()\`\` does create a copy of the asset after loading it</span>
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference-and-load-scenes-from-unity" tabindex="-1"><a class="header-anchor" href="#reference-and-load-scenes-from-unity" aria-hidden="true">#</a> Reference and load scenes from Unity</h2>`,7),b={class:"custom-container tip"},h=n("p",{class:"custom-container-title"},"TIP",-1),y={href:"https://engine.needle.tools/samples/?open=1#multi-scenes--dynamic-loading",target:"_blank",rel:"noopener noreferrer"},w=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> serializable<span class="token punctuation">,</span> AssetReference <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">LoadingScenes</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>
    <span class="token comment">// tell the component compiler that we want to reference an array of SceneAssets</span>
    <span class="token comment">// @type UnityEditor.SceneAsset[]</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>AssetReference<span class="token punctuation">)</span>
    myScenes<span class="token operator">?</span><span class="token operator">:</span> AssetReference<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">async</span> <span class="token function">awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>myScenes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> scene <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myScenes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// check if it is assigned in unity</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>scene<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token comment">// load the scene once</span>
            <span class="token keyword">const</span> myScene <span class="token operator">=</span> <span class="token keyword">await</span> scene<span class="token punctuation">.</span><span class="token function">loadAssetAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// add it to the threejs scene</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>myScene<span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token comment">// of course you can always just load one at a time</span>
            <span class="token comment">// and remove it from the scene when you want</span>
            <span class="token comment">// myScene.removeFromParent();</span>
            <span class="token comment">// this is the same as scene.asset.removeFromParent()</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>myScenes<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> scene <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myScenes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            scene<span class="token operator">?.</span><span class="token function">unload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="receive-clicks-on-objects" tabindex="-1"><a class="header-anchor" href="#receive-clicks-on-objects" aria-hidden="true">#</a> Receive Clicks on Objects</h2><p>Add this script to any object in your scene that you want to be clickable. Make sure to also have an <code>ObjectRaycaster</code> component in the parent hierarchy of that object.</p>`,3),g=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> IPointerClickHandler<span class="token punctuation">,</span> PointerEventData<span class="token punctuation">,</span> showBalloonMessage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ClickExample</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token keyword">implements</span> <span class="token class-name">IPointerClickHandler</span> <span class="token punctuation">{</span>

    <span class="token comment">// Make sure to have an ObjectRaycaster component in the parent hierarchy</span>
    <span class="token function">onPointerClick</span><span class="token punctuation">(</span>_args<span class="token operator">:</span> PointerEventData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">showBalloonMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Clicked &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="networking-clicks-on-objects" tabindex="-1"><a class="header-anchor" href="#networking-clicks-on-objects" aria-hidden="true">#</a> Networking Clicks on Objects</h2><p>Add this script to any object in your scene that you want to be clickable. Make sure to also have an <code>ObjectRaycaster</code> component in the parent hierarchy of that object.<br> The component will send the received click to all connected clients and will raise an event that you can then react to in your app. If you are using Unity or Blender you can simply assign functions to call to the <code>onClick</code> event to e.g. play an animation or hide objects.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> EventList<span class="token punctuation">,</span> IPointerClickHandler<span class="token punctuation">,</span> PointerEventData<span class="token punctuation">,</span> serializable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SyncedClick</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token keyword">implements</span> <span class="token class-name">IPointerClickHandler</span> <span class="token punctuation">{</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>EventList<span class="token punctuation">)</span>
    onClick<span class="token operator">!</span><span class="token operator">:</span> EventList<span class="token punctuation">;</span>

    <span class="token function">onPointerClick</span><span class="token punctuation">(</span>_args<span class="token operator">:</span> PointerEventData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;SEND CLICK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;clicked/&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>guid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onClick<span class="token operator">?.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">onEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">beginListen</span><span class="token punctuation">(</span><span class="token string">&quot;clicked/&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>guid<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onRemoteClick<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">onDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">stopListen</span><span class="token punctuation">(</span><span class="token string">&quot;clicked/&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>guid<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onRemoteClick<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token function-variable function">onRemoteClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;RECEIVED CLICK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onClick<span class="token operator">?.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="play-animation-on-click" tabindex="-1"><a class="header-anchor" href="#play-animation-on-click" aria-hidden="true">#</a> Play Animation on click</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> serializable<span class="token punctuation">,</span> Animation<span class="token punctuation">,</span> IPointerClickHandler<span class="token punctuation">,</span> PointerEventData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PlayAnimationOnClick</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token keyword">implements</span> <span class="token class-name">IPointerClickHandler</span> <span class="token punctuation">{</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>Animation<span class="token punctuation">)</span>
    animation<span class="token operator">?</span><span class="token operator">:</span> Animation<span class="token punctuation">;</span>

    <span class="token function">awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>animation<span class="token punctuation">.</span>playAutomatically <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>animation<span class="token punctuation">.</span>loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">onPointerClick</span><span class="token punctuation">(</span>_args<span class="token operator">:</span> PointerEventData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>animation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>animation<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference-an-animation-clip" tabindex="-1"><a class="header-anchor" href="#reference-an-animation-clip" aria-hidden="true">#</a> Reference an Animation Clip</h2><p>This can be useful if you want to run your custom animation logic.<br> You can also export an array of clips.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> serializable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AnimationClip <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;three&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ExportAnimationClip</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>AnimationClip<span class="token punctuation">)</span>
    animation<span class="token operator">?</span><span class="token operator">:</span> AnimationClip<span class="token punctuation">;</span>

    <span class="token function">awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;My referenced animation clip&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>animation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="create-and-invoke-a-unityevent" tabindex="-1"><a class="header-anchor" href="#create-and-invoke-a-unityevent" aria-hidden="true">#</a> Create and invoke a UnityEvent</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> serializable<span class="token punctuation">,</span> EventList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>EventList<span class="token punctuation">)</span>
    myEvent<span class="token operator">?</span> <span class="token operator">:</span> EventList<span class="token punctuation">;</span>

    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>myEvent<span class="token operator">?.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),f={class:"custom-container tip"},x=n("p",{class:"custom-container-title"},"TIP",-1),_=n("code",null,'myComponent.addEventListener("my-event", evt => {...})',-1),q=n("br",null,null,-1),C={href:"https://discord.needle.tools",target:"_blank",rel:"noopener noreferrer"},S=e(`<h3 id="declare-a-custom-event-type" tabindex="-1"><a class="header-anchor" href="#declare-a-custom-event-type" aria-hidden="true">#</a> Declare a custom event type</h3><p>This is useful for when you want to expose an event to Unity or Blender with some custom arguments (like a string)</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> serializable<span class="token punctuation">,</span> EventList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Object3D <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">;</span>

<span class="token comment">/*
Make sure to have a c# file in your project with the following content:

using UnityEngine;
using UnityEngine.Events;

[System.Serializable]
public class MyCustomUnityEvent : UnityEvent&lt;string&gt;
{
}

Unity documentation about custom events: 
https://docs.unity3d.com/ScriptReference/Events.UnityEvent_2.html

*/</span>

<span class="token comment">// Documentation → https://docs.needle.tools/scripting</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CustomEventCaller</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token comment">// The next line is not just a comment, it defines </span>
    <span class="token comment">// a specific type for the component generator to use.</span>

    <span class="token comment">//@type MyCustomUnityEvent</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>EventList<span class="token punctuation">)</span>
    myEvent<span class="token operator">!</span><span class="token operator">:</span> EventList<span class="token punctuation">;</span>

    <span class="token comment">// just for testing - could be when a button is clicked, etc.</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>myEvent<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CustomEventReceiver</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token function">logStringAndObject</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;From Event: &quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>Example use:</em><br><img src="https://user-images.githubusercontent.com/2693840/204370950-4c89b877-90d7-4e6f-8266-3352e6da16f4.png" alt="20221128-210735_Unity-needle"></p><h2 id="use-nested-objects-and-serialization" tabindex="-1"><a class="header-anchor" href="#use-nested-objects-and-serialization" aria-hidden="true">#</a> Use nested objects and serialization</h2><p>You can nest objects and their data. With properly matching <code>@serializable(SomeType)</code> decorators, the data will be serialized and deserialized into the correct types automatically.</p><p>In your typescript component:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> serializable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Documentation → https://docs.needle.tools/scripting</span>

<span class="token keyword">class</span> <span class="token class-name">CustomSubData</span> <span class="token punctuation">{</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    subString<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    subNumber<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">CustomData</span> <span class="token punctuation">{</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    myStringField<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    myNumberField<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    myBooleanField<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>CustomSubData<span class="token punctuation">)</span>
    subData<span class="token operator">:</span> CustomSubData <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

    <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;My string is &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myStringField<span class="token punctuation">,</span> <span class="token string">&quot;my sub data&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subData<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SerializedDataSample</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>CustomData<span class="token punctuation">)</span>  
    myData<span class="token operator">:</span> CustomData <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    
    <span class="token function">onEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>myData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>myData<span class="token operator">?.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In C# in any script:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Serializable</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomSubData</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> subString<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> subNumber<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
	
<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Serializable</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomData</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> myStringField<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">float</span></span> myNumberField<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">bool</span></span> myBooleanField<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">CustomSubData</span> subData<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Without the correct type decorators, you will still get the data, but just as a plain object. This is useful when you&#39;re porting components, as you&#39;ll have access to all data and can add types as required.</p></div><h2 id="use-web-apis" tabindex="-1"><a class="header-anchor" href="#use-web-apis" aria-hidden="true">#</a> Use Web APIs</h2>`,12),E={class:"custom-container tip"},j=n("p",{class:"custom-container-title"},"TIP",-1),O={href:"https://npmjs.org",target:"_blank",rel:"noopener noreferrer"},M=n("br",null,null,-1),z=e(`<h3 id="display-current-location" tabindex="-1"><a class="header-anchor" href="#display-current-location" aria-hidden="true">#</a> Display current location</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> showBalloonMessage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">WhereAmI</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        navigator<span class="token punctuation">.</span>geolocation<span class="token punctuation">.</span><span class="token function">getCurrentPosition</span><span class="token punctuation">(</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Navigator response:&quot;</span><span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> latlong <span class="token operator">=</span> position<span class="token punctuation">.</span>coords<span class="token punctuation">.</span>latitude <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> position<span class="token punctuation">.</span>coords<span class="token punctuation">.</span>longitude<span class="token punctuation">;</span>
            <span class="token function">showBalloonMessage</span><span class="token punctuation">(</span><span class="token string">&quot;You are at\\nLatLong &quot;</span> <span class="token operator">+</span> latlong<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="display-current-time-using-a-coroutine" tabindex="-1"><a class="header-anchor" href="#display-current-time-using-a-coroutine" aria-hidden="true">#</a> Display current time using a Coroutine</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> serializable<span class="token punctuation">,</span> WaitForSeconds <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DisplayTime</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>Text<span class="token punctuation">)</span>
    text<span class="token operator">?</span><span class="token operator">:</span> Text<span class="token punctuation">;</span>

    <span class="token function">onEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startCoroutine</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token operator">*</span><span class="token function">updateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">yield</span> <span class="token function">WaitForSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),B=n("h2",{id:"change-custom-shader-property",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#change-custom-shader-property","aria-hidden":"true"},"#"),s(" Change custom shader property")],-1),L=n("code",null,"_Speed",-1),T=n("br",null,null,-1),R={href:"https://engine.needle.tools/samples?open=1#shaders",target:"_blank",rel:"noopener noreferrer"},P=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> serializable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Material <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">declare</span> <span class="token keyword">type</span> <span class="token class-name">MyCustomShaderMaterial</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
   _Speed<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">IncreaseShaderSpeedOverTime</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

   <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>Material<span class="token punctuation">)</span>
   myMaterial<span class="token operator">?</span><span class="token operator">:</span> Material <span class="token operator">&amp;</span> MyCustomShaderMaterial<span class="token punctuation">;</span>

   <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>myMaterial<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">this</span><span class="token punctuation">.</span>myMaterial<span class="token punctuation">.</span>_Speed <span class="token operator">*=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>
           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>myMaterial<span class="token punctuation">.</span>_Speed <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myMaterial<span class="token punctuation">.</span>_Speed <span class="token operator">=</span> <span class="token number">.0005</span><span class="token punctuation">;</span>
           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>time<span class="token punctuation">.</span>frame <span class="token operator">%</span> <span class="token number">30</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>myMaterial<span class="token punctuation">.</span>_Speed<span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="sample-code-links"><a href="https://github.com/needle-tools/needle-engine-samples/blob/docs/code-marker/package/Runtime/_Shared/SampleScripts~/ChangeCustomShaderProperty.ts#L2" target="_blank"><img src="https://img.shields.io/badge/View on-GitHub-green?style=flat-square" alt="View on GitHub"></a></div><h2 id="switching-src-attribute" tabindex="-1"><a class="header-anchor" href="#switching-src-attribute" aria-hidden="true">#</a> Switching src attribute</h2>`,3),D={href:"https://stackblitz.com/edit/needle-engine-cycle-src?file=index.html",target:"_blank",rel:"noopener noreferrer"},A=n("h2",{id:"adding-new-postprocessing-effects",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#adding-new-postprocessing-effects","aria-hidden":"true"},"#"),s(" Adding new postprocessing effects")],-1),H={href:"https://github.com/pmndrs/postprocessing",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"npm i postprocessing",-1),G=n("code",null,"PostProcessingEffect",-1),I=n("p",null,[s("To use the effect add it to the same object as your "),n("code",null,"Volume"),s(" component.")],-1),U={href:"https://pmndrs.github.io/postprocessing/public/demo/#outline",target:"_blank",rel:"noopener noreferrer"},F=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> EffectProviderResult<span class="token punctuation">,</span> PostProcessingEffect<span class="token punctuation">,</span> registerCustomEffectType<span class="token punctuation">,</span> serializable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> OutlineEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;postprocessing&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Object3D <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">OutlinePostEffect</span> <span class="token keyword">extends</span> <span class="token class-name">PostProcessingEffect</span> <span class="token punctuation">{</span>

    <span class="token comment">// the outline effect takes a list of objects to outline</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>Object3D<span class="token punctuation">)</span>
    selection<span class="token operator">!</span><span class="token operator">:</span> Object3D<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// this is just an example method that you could call to update the outline effect selection</span>
    <span class="token function">updateSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_outlineEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_outlineEffect<span class="token punctuation">.</span>selection<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> obj <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>_outlineEffect<span class="token punctuation">.</span>selection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token comment">// a unique name is required for custom effects</span>
    <span class="token keyword">get</span> <span class="token function">typeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Outline&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> _outlineEffect<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> OutlineEffect<span class="token punctuation">;</span>

    <span class="token comment">// method that creates the effect once</span>
    <span class="token function">onCreateEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> EffectProviderResult <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>

        <span class="token keyword">const</span> outlineEffect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutlineEffect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>scene<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>mainCamera<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_outlineEffect <span class="token operator">=</span> outlineEffect<span class="token punctuation">;</span>
        outlineEffect<span class="token punctuation">.</span>edgeStrength <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        outlineEffect<span class="token punctuation">.</span>visibleEdgeColor<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0xff0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> obj <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            outlineEffect<span class="token punctuation">.</span>selection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> outlineEffect<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// You need to register your effect type with the engine</span>
<span class="token function">registerCustomEffectType</span><span class="token punctuation">(</span><span class="token string">&quot;Outline&quot;</span><span class="token punctuation">,</span> OutlinePostEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="receiving-html-element-click-in-component" tabindex="-1"><a class="header-anchor" href="#receiving-html-element-click-in-component" aria-hidden="true">#</a> Receiving html element click in component</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> EventList<span class="token punctuation">,</span> serializable<span class="token punctuation">,</span> serializeable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HTMLButtonClick</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/** Enter a button query (e.g. button.some-button if you&#39;re interested in a button with the class &#39;some-button&#39;) 
     * Or you can also use an id (e.g. #some-button if you&#39;re interested in a button with the id &#39;some-button&#39;)
     * Or you can also use a tag (e.g. button if you&#39;re interested in any button
    */</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializeable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    htmlSelector<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;button.some-button&quot;</span><span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/** This is the event to be invoked when the html element is clicked. In Unity or Blender you can assign methods to be called in the Editor */</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>EventList<span class="token punctuation">)</span>
    onClick<span class="token operator">:</span> EventList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> element<span class="token operator">?</span> <span class="token operator">:</span> HTMLButtonElement<span class="token punctuation">;</span>

    <span class="token function">onEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Get the element from the DOM</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>htmlSelector<span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLButtonElement<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClicked<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Could not find element with selector \\&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>htmlSelector<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">onDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onClicked<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token function-variable function">onClicked</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onClick<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="sample-code-links"><a href="https://github.com/needle-tools/needle-engine-samples/blob/docs/code-marker/package/Runtime/_Shared/SampleScripts~/HTMLButtonEvent.ts#L2" target="_blank"><img src="https://img.shields.io/badge/View on-GitHub-green?style=flat-square" alt="View on GitHub"></a></div><h2 id="disable-environment-light" tabindex="-1"><a class="header-anchor" href="#disable-environment-light" aria-hidden="true">#</a> Disable environment light</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Texture <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">DisableEnvironmentLight</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

   <span class="token keyword">private</span> _previousEnvironmentTexture<span class="token operator">:</span> Texture <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

   <span class="token function">onEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>_previousEnvironmentTexture <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>environment<span class="token punctuation">;</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>environment <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token function">onDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>scene<span class="token punctuation">.</span>environment <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_previousEnvironmentTexture<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="sample-code-links"><a href="https://github.com/needle-tools/needle-engine-samples/blob/docs/code-marker/package/Runtime/_Shared/SampleScripts~/DisableEnvironment.ts#L2" target="_blank"><img src="https://img.shields.io/badge/View on-GitHub-green?style=flat-square" alt="View on GitHub"></a></div><h2 id="use-mediapipe-package-to-control-the-3d-scene-with-hands" tabindex="-1"><a class="header-anchor" href="#use-mediapipe-package-to-control-the-3d-scene-with-hands" aria-hidden="true">#</a> Use mediapipe package to control the 3D scene with hands</h2>`,8),N=n("br",null,null,-1),W={href:"https://engine.needle.tools/samples/mediapipe-hands/",target:"_blank",rel:"noopener noreferrer"},Y=e(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> FilesetResolver<span class="token punctuation">,</span> HandLandmarker<span class="token punctuation">,</span> HandLandmarkerResult<span class="token punctuation">,</span> NormalizedLandmark <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@mediapipe/tasks-vision&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> Mathf<span class="token punctuation">,</span> serializable<span class="token punctuation">,</span> showBalloonMessage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ParticleSphere <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./ParticleSphere&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MediapipeHands</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>ParticleSphere<span class="token punctuation">)</span>
    spheres<span class="token operator">:</span> ParticleSphere<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> _video<span class="token operator">!</span><span class="token operator">:</span> HTMLVideoElement<span class="token punctuation">;</span>
    <span class="token keyword">private</span> _handLandmarker<span class="token operator">!</span><span class="token operator">:</span> HandLandmarker<span class="token punctuation">;</span>

    <span class="token keyword">async</span> <span class="token function">awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">showBalloonMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Initializing mediapipe...&quot;</span><span class="token punctuation">)</span>

        <span class="token keyword">const</span> vision <span class="token operator">=</span> <span class="token keyword">await</span> FilesetResolver<span class="token punctuation">.</span><span class="token function">forVisionTasks</span><span class="token punctuation">(</span>
            <span class="token comment">// path/to/wasm/root</span>
            <span class="token string">&quot;https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@latest/wasm&quot;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_handLandmarker <span class="token operator">=</span> <span class="token keyword">await</span> HandLandmarker<span class="token punctuation">.</span><span class="token function">createFromOptions</span><span class="token punctuation">(</span>
            vision<span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                baseOptions<span class="token operator">:</span> <span class="token punctuation">{</span>
                    modelAssetPath<span class="token operator">:</span> <span class="token string">&quot;https://storage.googleapis.com/mediapipe-models/hand_landmarker/hand_landmarker/float16/latest/hand_landmarker.task&quot;</span><span class="token punctuation">,</span>
                    delegate<span class="token operator">:</span> <span class="token string">&quot;GPU&quot;</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                numHands<span class="token operator">:</span> <span class="token number">2</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//@ts-ignore</span>
        <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_handLandmarker<span class="token punctuation">.</span><span class="token function">setOptions</span><span class="token punctuation">(</span><span class="token punctuation">{</span> runningMode<span class="token operator">:</span> <span class="token string">&quot;VIDEO&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>_video <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;video&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_video<span class="token punctuation">.</span>autoplay <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_video<span class="token punctuation">.</span>playsInline <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>domElement<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_video<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startWebcam</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_video<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> _lastVideoTime<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_video <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_handLandmarker<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> video <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_video<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>video<span class="token punctuation">.</span>currentTime <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_lastVideoTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> startTimeMs <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">showBalloonMessage</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;strong&gt;Control the spheres with one or two hands&lt;/strong&gt;!&lt;br/&gt;&lt;br/&gt;Sample scene by &lt;a href=&#39;https://twitter.com/llllkatjallll/status/1659280435023605773&#39;&gt;Katja Rempel&lt;/a&gt;&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">const</span> detections <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_handLandmarker<span class="token punctuation">.</span><span class="token function">detectForVideo</span><span class="token punctuation">(</span>video<span class="token punctuation">,</span> startTimeMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processResults</span><span class="token punctuation">(</span>detections<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_lastVideoTime <span class="token operator">=</span> video<span class="token punctuation">.</span>currentTime<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token function">processResults</span><span class="token punctuation">(</span>results<span class="token operator">:</span> HandLandmarkerResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> hand1 <span class="token operator">=</span> results<span class="token punctuation">.</span>landmarks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// check if we have even one hand</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hand1<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>hand1<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>spheres<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> pos <span class="token operator">=</span> hand1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processLandmark</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>spheres<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// if we have a second sphere:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>spheres<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> hand2 <span class="token operator">=</span> results<span class="token punctuation">.</span>landmarks<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hand2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> pos <span class="token operator">=</span> hand1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processLandmark</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>spheres<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> pos <span class="token operator">=</span> hand2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processLandmark</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>spheres<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token function">processLandmark</span><span class="token punctuation">(</span>sphere<span class="token operator">:</span> ParticleSphere<span class="token punctuation">,</span> pos<span class="token operator">:</span> NormalizedLandmark<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> px <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">remap</span><span class="token punctuation">(</span>pos<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> py <span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">remap</span><span class="token punctuation">(</span>pos<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sphere<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>px<span class="token punctuation">,</span> py<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">async</span> <span class="token function">startWebcam</span><span class="token punctuation">(</span>video<span class="token operator">:</span> HTMLVideoElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> constraints <span class="token operator">=</span> <span class="token punctuation">{</span> video<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> audio<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span>constraints<span class="token punctuation">)</span><span class="token punctuation">;</span>
        video<span class="token punctuation">.</span>srcObject <span class="token operator">=</span> stream<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="sample-code-links"><a href="https://github.com/needle-tools/needle-engine-samples/blob/docs/code-marker/package/Runtime/Mediapipe/needle-mediapipe~/MediapipeHands.ts#L2" target="_blank"><img src="https://img.shields.io/badge/View on-GitHub-green?style=flat-square" alt="View on GitHub"></a></div><h2 id="change-color-on-collision" tabindex="-1"><a class="header-anchor" href="#change-color-on-collision" aria-hidden="true">#</a> Change Color On Collision</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> Collision<span class="token punctuation">,</span> Renderer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span><span class="token punctuation">{</span> Color <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ChangeColorOnCollision</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> renderer<span class="token operator">:</span> Renderer <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> collisionCount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> _startColor<span class="token operator">?</span> <span class="token operator">:</span> Color<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>renderer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span>Renderer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>renderer<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_startColor<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_startColor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_startColor<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">onCollisionEnter</span><span class="token punctuation">(</span>_col<span class="token operator">:</span> Collision<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>renderer<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>collisionCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setRGB</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">onCollisionExit</span><span class="token punctuation">(</span>_col<span class="token operator">:</span> Collision<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>renderer <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_startColor<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>collisionCount <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>collisionCount <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>renderer<span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;color&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_startColor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token comment">// .setRGB(.1, .1, .1);</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// more events:</span>
    <span class="token comment">// onCollisionStay(_col: Collision)</span>
    <span class="token comment">// onCollisionExit(_col: Collision)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="sample-code-links"><a href="https://github.com/needle-tools/needle-engine-samples/blob/docs/code-marker/package/Runtime/_Shared/SampleScripts~/ChangeColorOnCollision.ts#L2" target="_blank"><img src="https://img.shields.io/badge/View on-GitHub-green?style=flat-square" alt="View on GitHub"></a></div><h2 id="physics-trigger-relay" tabindex="-1"><a class="header-anchor" href="#physics-trigger-relay" aria-hidden="true">#</a> Physics Trigger Relay</h2><p>Invoke events using an objects physics trigger methods</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PhysicsTrigger</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializeable</span></span><span class="token punctuation">(</span>GameObject<span class="token punctuation">)</span>
    triggerObjects<span class="token operator">?</span><span class="token operator">:</span>GameObject<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializeable</span></span><span class="token punctuation">(</span>EventList<span class="token punctuation">)</span>
    onEnter<span class="token operator">?</span><span class="token operator">:</span> EventList<span class="token punctuation">;</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializeable</span></span><span class="token punctuation">(</span>EventList<span class="token punctuation">)</span>
    onStay<span class="token operator">?</span><span class="token operator">:</span> EventList<span class="token punctuation">;</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializeable</span></span><span class="token punctuation">(</span>EventList<span class="token punctuation">)</span>
    onExit<span class="token operator">?</span><span class="token operator">:</span> EventList<span class="token punctuation">;</span>

    <span class="token function">onTriggerEnter</span><span class="token punctuation">(</span>col<span class="token operator">:</span> Collider<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>triggerObjects <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>triggerObjects<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>triggerObjects<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span>col<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onEnter<span class="token operator">?.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">onTriggerStay</span><span class="token punctuation">(</span>col<span class="token operator">:</span> Collider<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>triggerObjects <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>triggerObjects<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>triggerObjects<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span>col<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onStay<span class="token operator">?.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">onTriggerExit</span><span class="token punctuation">(</span>col<span class="token operator">:</span> Collider<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>triggerObjects <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>triggerObjects<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>triggerObjects<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span>col<span class="token punctuation">.</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>onExit<span class="token operator">?.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="sample-code-links"><a href="https://github.com/needle-tools/needle-engine-samples/blob/docs/code-marker/package/Runtime/_Shared/SampleScripts~/PhysicsCollision.ts#L40" target="_blank"><img src="https://img.shields.io/badge/View on-GitHub-green?style=flat-square" alt="View on GitHub"></a></div><h2 id="auto-reset" tabindex="-1"><a class="header-anchor" href="#auto-reset" aria-hidden="true">#</a> Auto Reset</h2><p>Reset an object&#39;s position automatically when it&#39;s leaving a physics trigger</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> Collider<span class="token punctuation">,</span> GameObject<span class="token punctuation">,</span> Rigidbody<span class="token punctuation">,</span> serializeable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Vector3 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">StartPosition</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token comment">//@nonSerialized</span>
    startPosition<span class="token operator">?</span><span class="token operator">:</span> Vector3<span class="token punctuation">;</span>

    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateStartPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">updateStartPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>startPosition <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">resetToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>startPosition<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> rb <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">,</span> Rigidbody<span class="token punctuation">)</span><span class="token punctuation">;</span>
        rb<span class="token operator">?.</span><span class="token function">teleport</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** Reset to start position when object is exiting the collider */</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AutoReset</span> <span class="token keyword">extends</span> <span class="token class-name">StartPosition</span> <span class="token punctuation">{</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializeable</span></span><span class="token punctuation">(</span>Collider<span class="token punctuation">)</span>
    worldCollider<span class="token operator">?</span><span class="token operator">:</span> Collider<span class="token punctuation">;</span>

    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>worldCollider<span class="token punctuation">)</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Missing collider to reset&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token function">onTriggerExit</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>col <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>worldCollider<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resetToStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="sample-code-links"><a href="https://github.com/needle-tools/needle-engine-samples/blob/docs/code-marker/package/Runtime/_Shared/SampleScripts~/StartPosition.ts#L2" target="_blank"><img src="https://img.shields.io/badge/View on-GitHub-green?style=flat-square" alt="View on GitHub"></a></div><h2 id="play-audio-on-collision" tabindex="-1"><a class="header-anchor" href="#play-audio-on-collision" aria-hidden="true">#</a> Play Audio On Collision</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> AudioSource<span class="token punctuation">,</span> Behaviour<span class="token punctuation">,</span> serializeable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PlayAudioOnCollision</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializeable</span></span><span class="token punctuation">(</span>AudioSource<span class="token punctuation">)</span>
    audioSource<span class="token operator">?</span><span class="token operator">:</span> AudioSource<span class="token punctuation">;</span>

    <span class="token function">onCollisionEnter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>audioSource<span class="token operator">?.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="sample-code-links"><a href="https://github.com/needle-tools/needle-engine-samples/blob/docs/code-marker/package/Runtime/_Shared/SampleScripts~/PlayAudioOnCollision.ts#L2" target="_blank"><img src="https://img.shields.io/badge/View on-GitHub-green?style=flat-square" alt="View on GitHub"></a></div><h2 id="set-random-color" tabindex="-1"><a class="header-anchor" href="#set-random-color" aria-hidden="true">#</a> Set Random Color</h2><p>Randomize the color of an object on start. Note that the materials are cloned in the <code>start</code> method</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> serializeable<span class="token punctuation">,</span> Renderer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Color <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">RandomColor</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializeable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    applyOnStart<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applyOnStart<span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">applyRandomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// if materials are not cloned and we change the color they might also change on other objects</span>
        <span class="token keyword">const</span> cloneMaterials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cloneMaterials<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span>Renderer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>renderer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> renderer<span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                renderer<span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> renderer<span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">applyRandomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span>Renderer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>renderer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Can not change color: No renderer on &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> renderer<span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            renderer<span class="token punctuation">.</span>sharedMaterials<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="sample-code-links"><a href="https://github.com/needle-tools/needle-engine-samples/blob/docs/code-marker/package/Runtime/_Shared/SampleScripts~/ChangeColor.ts#L2" target="_blank"><img src="https://img.shields.io/badge/View on-GitHub-green?style=flat-square" alt="View on GitHub"></a></div><h2 id="spawn-objects-over-time" tabindex="-1"><a class="header-anchor" href="#spawn-objects-over-time" aria-hidden="true">#</a> Spawn Objects Over Time</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> GameObject<span class="token punctuation">,</span> LogType<span class="token punctuation">,</span> serializeable<span class="token punctuation">,</span> showBalloonMessage<span class="token punctuation">,</span> WaitForSeconds <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">TimedSpawn</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializeable</span></span><span class="token punctuation">(</span>GameObject<span class="token punctuation">)</span>
    object<span class="token operator">?</span><span class="token operator">:</span> GameObject<span class="token punctuation">;</span>

    interval<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
    max<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> spawned<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token function">awake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;TimedSpawn: no object to spawn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">showBalloonMessage</span><span class="token punctuation">(</span><span class="token string">&quot;TimedSpawn: no object to spawn&quot;</span><span class="token punctuation">,</span> LogType<span class="token punctuation">.</span>Warn<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        GameObject<span class="token punctuation">.</span><span class="token function">setActive</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>object<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startCoroutine</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token operator">*</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>object<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>spawned <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> instance <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
            GameObject<span class="token punctuation">.</span><span class="token function">setActive</span><span class="token punctuation">(</span>instance<span class="token operator">!</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>spawned <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">yield</span> <span class="token function">WaitForSeconds</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>interval <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="sample-code-links"><a href="https://github.com/needle-tools/needle-engine-samples/blob/docs/code-marker/package/Runtime/_Shared/SampleScripts~/TimedSpawn.ts#L2" target="_blank"><img src="https://img.shields.io/badge/View on-GitHub-green?style=flat-square" alt="View on GitHub"></a></div>`,23);function K($,J){const o=p("stackblitz"),t=p("ExternalLinkIcon"),c=p("video-embed");return l(),u("div",null,[d,v,a(o,{file:"@code/basic-component.ts"}),s(),m,n("div",b,[h,n("p",null,[s("Find a "),n("a",y,[s("working example in our samples"),a(t)]),s(" to download and try")])]),w,a(o,{file:"@code/component-click.ts"},{default:r(()=>[s(" test ")]),_:1}),g,n("div",f,[x,n("p",null,[s("EventList events are also invoked on the component level. This means you can also subscribe to the event declared above using "),_,s(" as well."),q,s(" This is an experimental feature: please provide feedback in our "),n("a",C,[s("discord"),a(t)])])]),S,n("div",E,[j,n("p",null,[s("Keep in mind that you still have access to all web apis and "),n("a",O,[s("npm"),a(t)]),s(" packages!"),M,s(" That's the beauty of Needle Engine if we're allowed to say this here 😊")])]),z,a(c,{src:"./videos/component-time.mp4",limit_height:""}),B,n("p",null,[s("Assuming you have a custom shader with a property name "),L,s(" that is a float value this is how you would change it from a script."),T,s(" You can find a live "),n("a",R,[s("example to download in our samples"),a(t)])]),P,n("p",null,[s("See "),n("a",D,[s("live example"),a(t)]),s(" on StackBlitz")]),A,n("p",null,[s("Make sure to install "),n("a",H,[V,a(t)]),s(" in your web project. Then you can add new effects by deriving from "),G,s(".")]),I,n("p",null,[s("Here is an example that wraps the "),n("a",U,[s("Outline postprocessing effect"),a(t)]),s(". You can expose variables and settings as usual as any effect is also just a component in your three.js scene.")]),F,n("p",null,[s("Make sure to install the mediapipe package. Visit the github link below to see the complete project setup."),N,s(" Try it "),n("a",W,[s("live here"),a(t)]),s(" - requires a webcam/camera")]),Y])}const X=i(k,[["render",K],["__file","scripting-examples.html.vue"]]);export{X as default};
