import{_ as a,M as r,p as l,q as i,R as e,t as o,N as t,a1 as s}from"./framework-1a844b00.js";const d="/docs/debugging/vscode-start-debugging.webp",c={},u=e("h2",{id:"useful-resources-for-working-with-gltf",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#useful-resources-for-working-with-gltf","aria-hidden":"true"},"#"),o(" Useful resources for working with glTF")],-1),p=e("p",null,"To inspect glTF or glb files online:",-1),h={href:"https://gltf.report/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://modelviewer.dev/editor",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.khronos.org/glTF-Sample-Viewer-Release/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://sandbox.babylonjs.com/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.khronos.org/glTF-Validator/",target:"_blank",rel:"noopener noreferrer"},_=e("p",null,"To inspect them locally:",-1),v={href:"https://apps.microsoft.com/store/detail/gltf-shell-extensions/9NPGVJ9N57MV?hl=en-us&gl=US",target:"_blank",rel:"noopener noreferrer"},k={href:"https://marketplace.visualstudio.com/items?itemName=cesium.gltf-vscode",target:"_blank",rel:"noopener noreferrer"},y=s('<h2 id="built-in-url-parameters" tabindex="-1"><a class="header-anchor" href="#built-in-url-parameters" aria-hidden="true">#</a> Built-in URL parameters</h2><p>Debug Flags can be appended as URL query parameters.<br> Use <code>?help</code> to get a list of ALL parameters available.</p><p>Here are some of the most commonly used:</p><ul><li><code>help</code> print all available url parameter in the console</li><li><code>console</code> opens an on-screen dev console, useful for mobile debugging</li><li><code>printGltf</code> logs loaded gltf files to the console</li><li><code>debugavatar=&lt;avatarid&gt;</code> instantiates one debug avatar in center of world</li><li><code>showcolliders</code> shows physics colliders</li><li><code>gizmos</code> enables gizmo rendering (e.g. when using BoxCollider or AxesHelper components)</li><li>and a lot more: please use <code>help</code> to see them all</li></ul><h2 id="local-testing-of-release-builds" tabindex="-1"><a class="header-anchor" href="#local-testing-of-release-builds" aria-hidden="true">#</a> Local Testing of release builds</h2>',5),w=s("<li>First, install http-server: <code>npm install -g http-server</code></li><li>make a build (development or production)</li><li>open the <em>dist</em> directory with a commandline tool</li><li>run <code>http-server -g</code> | <em><code>-g</code> enables gzip support</em></li>",4),q={href:"https://stackoverflow.com/a/35231213",target:"_blank",rel:"noopener noreferrer"},x=e("code",null,"http-server -g -S",-1),S=s(`<h2 id="vscode" tabindex="-1"><a class="header-anchor" href="#vscode" aria-hidden="true">#</a> VSCode</h2><p>You can attach VSCode to the running local server to set breakpoint and debug your code.</p><p>Create a launch.json file at <code>.vscode/launch.json</code> in your web project with the following content:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.2.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;chrome&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;request&quot;</span><span class="token operator">:</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Attach Chrome&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://localhost:3000&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;webRoot&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${workspaceFolder}&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you have changed the port on which your server starts make sure to update the <code>url</code> field accordingly.<br> You can then start your local server from within VSCode:</p><p><img src="`+d+'" alt=""></p><h2 id="mobile" tabindex="-1"><a class="header-anchor" href="#mobile" aria-hidden="true">#</a> Mobile</h2><h3 id="android-debugging" tabindex="-1"><a class="header-anchor" href="#android-debugging" aria-hidden="true">#</a> Android Debugging</h3><p>For <strong>Android</strong> debugging, you can attach Chrome Dev Tools to your device and see logs right from your PC. You have to switch your device into development mode and connect it via USB.</p>',9),T={href:"https://developer.chrome.com/docs/devtools/remote-debugging/",target:"_blank",rel:"noopener noreferrer"},V={href:"https://developer.android.com/studio/debug/dev-options",target:"_blank",rel:"noopener noreferrer"},F=e("li",null,"Connect your phone to your computer via USB",-1),C=e("li",null,[o("Open this url in your browser "),e("code",null,"chrome://inspect/#devices")],-1),j=e("li",null,"On your mobile device allow the USB connection to your computer",-1),R=e("li",null,[o("On your computer in chrome you should see a list of open tabs after a while (on "),e("code",null,"chrome://inspect/#devices"),o(")")],-1),B=e("li",null,[o("Click "),e("code",null,"Inspect"),o(" on the tab you want to debug")],-1),L=e("h3",{id:"ios-debugging",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#ios-debugging","aria-hidden":"true"},"#"),o(" iOS Debugging")],-1),U=e("p",null,[o("For easy iOS debugging add the "),e("code",null,"?console"),o(" URL parameter to get a useful on-screen JavaScript console.")],-1),A=e("p",null,"If you have a Mac, you can also attach to Safari (similar to the Android workflow above).",-1),N={href:"https://labs.mozilla.org/projects/webxr-viewer/",target:"_blank",rel:"noopener noreferrer"},D=e("h3",{id:"quest-debugging",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#quest-debugging","aria-hidden":"true"},"#"),o(" Quest Debugging")],-1),M=e("p",null,[o("Quest is just an Android device - see the "),e("a",{href:"#android-debugging"},"Android Debugging"),o(" section for steps.")],-1);function O(z,E){const n=r("ExternalLinkIcon");return l(),i("div",null,[u,p,e("ul",null,[e("li",null,[e("a",h,[o("gltf.report"),t(n)]),o(" - three.js based")]),e("li",null,[e("a",g,[o("modelviewer.dev/editor"),t(n)]),o(" - three.js based")]),e("li",null,[e("a",b,[o("Khronos glTF Sample Viewer"),t(n)])]),e("li",null,[e("a",m,[o("Babylon Sandbox"),t(n)])]),e("li",null,[e("a",f,[o("glTF Validator"),t(n)])])]),_,e("ul",null,[e("li",null,[o("use the "),e("a",v,[o("glTF Shell Extension for Windows"),t(n)]),o(" to convert between glTF and glb")]),e("li",null,[o("use the "),e("a",k,[o("glTF Tools VS Code Extension"),t(n)]),o(" to see validation errors and in-engine previews locally")])]),y,e("ul",null,[w,e("li",null,[o("optional: if you want to test WebXR, generate a "),e("a",q,[o("self-signed SSL certificate"),t(n)]),o(", then run "),x,o(" to enable https (required for WebXR).")])]),S,e("p",null,[o("See the official chrome documentation "),e("a",T,[o("here"),t(n)])]),e("ul",null,[e("li",null,[o("Make sure "),e("a",V,[o("Developer Mode"),t(n)]),o(" is enabled on your phone")]),F,C,j,R,B]),L,U,A,e("p",null,[o("WebXR usage and debugging on iOS requires using a third-party browser: "),e("a",N,[o("Mozilla WebXR Viewer"),t(n)]),o(".")]),D,M])}const W=a(c,[["render",O],["__file","debugging.html.vue"]]);export{W as default};
