import{_ as r,M as l,p as d,q as c,R as e,t as n,N as t,V as s,a1 as a}from"./framework-1a844b00.js";const p="/docs/imgs/unity-needle-engine-modules-physics.jpg",u={},h=a('<h2 id="bundling-and-web-frontends" tabindex="-1"><a class="header-anchor" href="#bundling-and-web-frontends" aria-hidden="true">#</a> Bundling and web frontends</h2><p>Needle Engine is build as a web component.<br> This means just install <code>@needle-tools/engine</code> in your project and include <code>&lt;needle-engine src=&quot;path/to/your.glb&quot;&gt;</code> anywhere in your web-project.</p><ul><li>Install using npm:<br><code>npm i @needle-tools/engine</code></li></ul><p>With our default Vite based project template Needle Engine gets bundled into a web app on deployment. This ensures smaller files, tree-shaking (similar to code stripping in Unity) and optimizes load times. Instead of downloading numerous small scripts and components, only one or a few are downloaded that contain the minimal code needed.</p>',4),g={href:"https://vitejs.dev/guide/why.html",target:"_blank",rel:"noopener noreferrer"},m=e("h3",{id:"vite-vue-react-svelte-react-three-fiber...",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vite-vue-react-svelte-react-three-fiber...","aria-hidden":"true"},"#"),n(" Vite, Vue, React, Svelte, React Three Fiber...")],-1),b={href:"https://vitejs.dev",target:"_blank",rel:"noopener noreferrer"},f=e("p",null,"Here's some example tech stacks that are possible and that we use Needle Engine with:",-1),_=e("li",null,[e("p",null,[e("strong",null,"Vite + HTML"),n(" — It is what our default template uses")])],-1),y=e("strong",null,"Vite + Vue",-1),v={href:"https://needle.tools",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/needle-tools/needle-engine-samples",target:"_blank",rel:"noopener noreferrer"},k=e("li",null,[e("p",null,[e("strong",null,"Vite + Svelte")])],-1),x=e("li",null,[e("p",null,[e("strong",null,"Vite + React"),n(" — There's an experimental template shipped with the Unity integration for this that you can pick when generating a project!")])],-1),j=e("li",null,[e("p",null,[e("strong",null,"react-three-fiber"),n(" — There's an experimental template shipped with the Unity integration for this that you can pick when generating a project!")])],-1),E=e("strong",null,"Vercel & Nextjs",-1),N={href:"https://github.com/needle-engine/nextjs-sample",target:"_blank",rel:"noopener noreferrer"},T=e("strong",null,"CDN without any bundler",-1),R=a('<p>In short: we&#39;re currently providing a minimal vite template, but you can extend it or switch to other frameworks –<br> Let us know what and how you build, and how we can improve the experience for your usecase or provide an example!</p><details class="custom-container details"><summary>How do I create a custom project template in Unity?</summary><p>You can create and share your own web project templates to use other bundlers, build systems, or none at all.</p><p><strong>Create a new Template</strong></p><ol><li>Select <code>Create/Needle Engine/Project Template</code> to add a ProjectTemplate into the folder you want to use as a template</li><li>Done! It&#39;s that simple.</li></ol><p>The dependencies come from unity when there is a NpmDef in the project (so when your project uses local references).<br> You could also publish your packages to npm and reference them via version number.</p></details><h3 id="tree-shaking-to-reduce-bundle-size" tabindex="-1"><a class="header-anchor" href="#tree-shaking-to-reduce-bundle-size" aria-hidden="true">#</a> Tree-shaking to reduce bundle size</h3>',3),q={href:"https://developer.mozilla.org/en-US/docs/Glossary/Tree_shaking",target:"_blank",rel:"noopener noreferrer"},V=a(`<details class="custom-container details"><summary>How to remove Rapier physics engine? (Reduce the overall bundle size removing ~2MB (~600KB when gzipping))</summary><ul><li><p><strong>Option 1</strong>: via needlePlugins config:<br> Set <code>useRapier</code> to <code>false</code> in your vite.config: <code>needlePlugins(command, needleConfig, { useRapier: false }),</code></p></li><li><p><strong>Option 2</strong>: via vite.define config:<br> Declare the <code>NEEDLE_USE_RAPIER</code> define with <code>false</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">define</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token constant">NEEDLE_USE_RAPIER</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Option 3</strong>: via .env<br> Create a <code>.env</code> file in your web project and add <code>VITE_NEEDLE_USE_RAPIER=false</code></p></li><li><p><strong>Option 4</strong>: via Unity component<br> Add the <code>Needle Engine Modules</code> component to your scene and set <code>Physics Engine</code> to <code>None</code><br><img src="`+p+'" alt=""></p></li></ul></details><h2 id="accessing-needle-engine-and-components-from-external-javascript" tabindex="-1"><a class="header-anchor" href="#accessing-needle-engine-and-components-from-external-javascript" aria-hidden="true">#</a> Accessing Needle Engine and Components from external javascript</h2>',2),I=e("br",null,null,-1),S=a('<h2 id="customizing-how-loading-looks" tabindex="-1"><a class="header-anchor" href="#customizing-how-loading-looks" aria-hidden="true">#</a> Customizing how loading looks</h2><h3 id="builtin-styles" tabindex="-1"><a class="header-anchor" href="#builtin-styles" aria-hidden="true">#</a> Builtin styles</h3><p>The needle-engine loading appearance can use a light or dark skin.<br> To change the appearance use the <code>loading-style</code> attribute on the <code>&lt;needle-engine&gt;</code> web component.<br> Options are <code>light</code> and <code>dark</code> (default):</p><p><code>&lt;needle-engine loading-style=&quot;light&quot;&gt;&lt;/needle-engine&gt;</code></p><h3 id="custom-loading-style" tabindex="-1"><a class="header-anchor" href="#custom-loading-style" aria-hidden="true">#</a> Custom Loading Style*</h3><p>*<em>Requires Pro License</em></p><p>To change the loading appearance the following attributes can be used:</p><ul><li><code>loading-background-color</code></li><li><code>loading-text-color</code></li><li><code>loading-logo-src</code></li><li><code>primary-color</code></li><li><code>secondary-color</code></li></ul><p>For example:<br><code>&lt;needle-engine loading-background-color=&quot;#444&quot; loading-text-color=&quot;#000000&quot; loading-logo-src=&quot;your_logo.png&quot; primary-color=&quot;#00ff00&quot; secondary-color=&quot;#ff0000&quot;&gt;&lt;/needle-engine&gt;</code></p><p>During styling of the loading bar you can append <code>?debugloadingbarrendering</code> to your URL to keep the loading overlay visible.</p>',10);function L(z,C){const o=l("ExternalLinkIcon"),i=l("RouterLink");return d(),c("div",null,[h,e("p",null,[n("Vite (our default bundler) has a good explanation why web apps should be bundled: "),e("a",g,[n("Why Bundle for Production"),t(o)])]),m,e("p",null,[n("Needle Engine is unoponiated about the choice of framework. The default template only uses vite as bundler. Adding vue to that is easy (see the "),e("a",b,[n("vite docs"),t(o)]),n("), we also provide an (experimental) react-three-fiber template and there should be nothing stopping your from using simpler or more complex frameworks.")]),f,e("ul",null,[_,e("li",null,[e("p",null,[y,n(" — This is what the "),e("a",v,[n("Needle Tools"),t(o)]),n(" website uses!. Find a sample to download "),e("a",w,[n("here"),t(o)]),n(".")])]),k,x,j,e("li",null,[e("p",null,[E,n(" — Find a "),e("a",N,[n("example nextjs project here"),t(o)])])]),e("li",null,[e("p",null,[T,n(" — Find a code example "),t(i,{to:"/vanilla-js.html"},{default:s(()=>[n("here")]),_:1})])])]),R,e("p",null,[n("Tree shaking refers to a common practice when it comes to bundling of web applications ("),e("a",q,[n("see MSDN docs"),t(o)]),n("). It means that code paths and features that are not used in your code will be removed from the final bundled javascript file(s) to reduce filesize. See below about features that Needle Engine includes and remove them:")]),V,e("p",null,[n("Code that you expose can be accessed from JavaScript after bundling. This allows to build viewers and other applications where there's a split between data known at edit time and data only known at runtime (e.g. dynamically loaded files, user generated content)."),I,n(" For accessing components from regular javascript outside of the engine please refer to the "),t(i,{to:"/scripting.html#accessing-components-from-external-javascript"},{default:s(()=>[n("interop with regular javascript section")]),_:1})]),S])}const U=r(u,[["render",L],["__file","html.html.vue"]]);export{U as default};
