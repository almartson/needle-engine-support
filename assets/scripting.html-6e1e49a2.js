import{_ as p,M as i,p as l,q as r,R as e,N as s,V as c,t as n,a1 as a}from"./framework-1a844b00.js";const d={},u=e("p",null,"If you are new to scripting we recommend reading the following guides first:",-1),m=e("hr",null,null,-1),h={href:"https://typescriptlang.org",target:"_blank",rel:"noopener noreferrer"},k={href:"https://javascript.info/",target:"_blank",rel:"noopener noreferrer"},v=e("p",null,"If you want to code-along with the following examples without having to install anything you just click the following link:",-1),b={href:"https://stackblitz.com/fork/github/needle-engine/vite-template?file=src%2Fmain.ts",target:"_blank",rel:"noopener noreferrer"},g=a('<hr><p>Our web runtime engine adopts a component model similar to Unity and thus provides a lot of functionality that will feel familiar. Components attached to three&#39;s Object3D objects have lifecycle methods like <code>awake</code>, <code>start</code>, <code>onEnable</code>, <code>onDisable</code>, <code>update</code> and <code>lateUpdate</code> that you can implement. You can also use <a href="#coroutines">Coroutines</a>.</p><hr><h2 id="when-you-don-t-need-to-write-code" tabindex="-1"><a class="header-anchor" href="#when-you-don-t-need-to-write-code" aria-hidden="true">#</a> When you don&#39;t need to write code</h2><p>Often, interactive scenes can be realized using Events in Unity and calling methods on built-in components. A typical example is playing an animation on button click - you create a button, add a Click event in the inspector, and have that call Animator.SetTrigger or similar to play a specific animation.</p><p>Needle Engine translates Unity Events into JavaScript method calls, which makes this a very fast and flexible workflow - set up your events as usual and when they&#39;re called they&#39;ll work the same as in Unity.</p><p><img src="https://user-images.githubusercontent.com/2693840/187314594-7e34905d-e704-4fa3-835c-6b40f11e1c62.png" alt="image"><br><em>An example of a Button Click Event that is working out-of-the-box in Needle Engine — no code needed.</em></p><h2 id="creating-a-new-component" tabindex="-1"><a class="header-anchor" href="#creating-a-new-component" aria-hidden="true">#</a> Creating a new component</h2><p>Scripts are written in TypeScript (recommended) or JavaScript.<br> There are two ways to add custom scripts to your project:</p>',9),y=e("li",null,[e("p",null,[n("Simply add a file with an "),e("code",null,".ts"),n(" or "),e("code",null,".js"),n(" extension inside "),e("code",null,"src/scripts/"),n(" in your generated project directory, for example "),e("code",null,"src/scripts/MyFirstScript.ts")])],-1),f=e("br",null,null,-1),w=e("br",null,null,-1),_=e("code",null,"Create > NPM Definition",-1),x=e("code",null,"Create > TypeScript",-1),j=e("p",null,[n("In both approaches, source directories are watched for changes and C# stub components or Blender panels are regenerated whenever a change is detected."),e("br"),n(" Changes to the source files also result in a hot reload of the running website – you don't have to wait for Unity to recompile the C# components. This makes iterating on code pretty much instant.")],-1),C=e("p",null,[n("You can even have multiple component types inside one file (e.g. you can declare "),e("code",null,"export class MyComponent1"),n(" and "),e("code",null,"export class MyOtherComponent"),n(" in the same Typescript file).")],-1),O=a(`<details class="custom-container details"><summary>Example: Creating a Component that rotates an object</summary><ul><li><strong>Create a component that rotates an object</strong><br> Create <code>src/scripts/Rotate.ts</code> and add the following code:</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> serializable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Rotate</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span>
<span class="token punctuation">{</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    speed <span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// logging this is useful for debugging in the browser. </span>
        <span class="token comment">// You can open the developer console (F12) to see what data your component contains</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// update will be called every frame</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>time<span class="token punctuation">.</span>deltaTime <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now inside Unity a new script called <code>Rotate.cs</code> will be automatically generated. Add the new Unity component to a Cube that is exported as part of a glTF file (it needs a <code>GltfObject</code> component in its parent) and save the scene.<br> The cube is now rotating inside the browser.<br> Open the chrome developer console by <code>F12</code> to inspect the log from the <code>Rotate.start</code> method. This is a helpful practice to learn and debug what fields are exported and currently assigned. In general all public and serializable fields and all public properties are exported.</p><p>Now add a new field <code>public float speed = 5</code> to your Unity component and save it. The Rotate component inspector now shows a <code>speed</code> field that you can edit. Save the scene (or click the <code>Build</code> button) and note that the javascript component now has the exported <code>speed</code> value assigned.</p></details>`,1),T={class:"custom-container details"},q=e("summary",null,"Create component with a custom function",-1),E=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">PrintNumberComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span>
<span class="token punctuation">{</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printNumber</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token function">printNumber</span><span class="token punctuation">(</span>myNumber <span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;My Number is: &quot;</span> <span class="token operator">+</span> myNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),N=a('<details class="custom-container details"><summary>Version Control &amp; Unity</summary><p>While generated C# components use the type name to produce stable GUIDs, we recommend checking in generated components in version control as a good practice.</p></details><h2 id="component-architecture" tabindex="-1"><a class="header-anchor" href="#component-architecture" aria-hidden="true">#</a> Component architecture</h2><p>Components are added to three.js <code>Object3Ds</code>. This is similar to how Components in Unity are added to <code>GameObjects</code>. Therefore when we want to access a three.js Object3D, we can access it as <code>this.gameObject</code> which returns the <code>Object3D</code> that the component is attached to.</p><p><em><strong>Note</strong>: Setting <code>visible</code> to false on a Object3D will act like <code>SetActive(false)</code> in Unity - meaning it will also disable all the current components on this object and its children. Update events for inactive components are not being called until <code>visible</code> is set to true again.</em> If you want to hide an object without affecting components you can just disable the Needle Engine <code>Renderer</code> component.</p><h3 id="lifecycle-methods" tabindex="-1"><a class="header-anchor" href="#lifecycle-methods" aria-hidden="true">#</a> Lifecycle methods</h3><p>Note that lifecycle methods are only being called when they are declared. So only declare <code>update</code> lifecycle methods when they are actually necessary, otherwise it may hurt performance if you have many components with update loops that do nothing.</p><table><thead><tr><th>Method name</th><th>Description</th></tr></thead><tbody><tr><td><code>awake()</code></td><td>First method being called when a new component is created</td></tr><tr><td><code>onEnable()</code></td><td>Called when a component is enabled (e.g. when <code>enabled</code> changes from false to true)</td></tr><tr><td><code>onDisable()</code></td><td>Called when a component is disabled (e.g. when <code>enabled</code> changes from true to false)</td></tr><tr><td><code>onDestroy()</code></td><td>called when the Object3D or component is being destroyed</td></tr><tr><td><code>start()</code></td><td>Called on the start of the first frame after the component was created</td></tr><tr><td><code>earlyUpdate()</code></td><td>First update event</td></tr><tr><td><code>update()</code></td><td>Default update event</td></tr><tr><td><code>lateUpdate()</code></td><td>Called after update</td></tr><tr><td><code>onBeforeRender()</code></td><td>Last update event before render call</td></tr><tr><td><code>onAfterRender()</code></td><td>Called after render event</td></tr></tbody></table><h3 id="physic-event-methods" tabindex="-1"><a class="header-anchor" href="#physic-event-methods" aria-hidden="true">#</a> Physic event methods</h3><table><thead><tr><th>Method name</th><th>Description</th></tr></thead><tbody><tr><td><code>onCollisionEnter(col : Collision)</code></td><td></td></tr><tr><td><code>onCollisionStay(col : Collision)</code></td><td></td></tr><tr><td><code>onCollisionExit(col : Collision)</code></td><td></td></tr><tr><td><code>onTriggerEnter(col : Collision)</code></td><td></td></tr><tr><td><code>onTriggerStay(col : Collision)</code></td><td></td></tr><tr><td><code>onTriggerExit(col : Collision)</code></td><td></td></tr></tbody></table><h3 id="coroutines" tabindex="-1"><a class="header-anchor" href="#coroutines" aria-hidden="true">#</a> Coroutines</h3>',10),D={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",target:"_blank",rel:"noopener noreferrer"},S=e("br",null,null,-1),I=e("code",null,"this.startCoroutine(this.myRoutineName());",-1),R=a(`<p><strong>Example</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> FrameEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Rotate</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// the second argument is optional and allows you to specifiy </span>
        <span class="token comment">// when it should be called in the current frame loop</span>
        <span class="token comment">// coroutine events are called after regular component events of the same name</span>
        <span class="token comment">// for example: Update coroutine events are called after component.update() functions</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startCoroutine</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> FrameEvent<span class="token punctuation">.</span>Update<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// this method is called every frame until the component is disabled</span>
    <span class="token operator">*</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// keep looping forever</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">yield</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To stop a coroutine, either exit the routine by returning from it, or cache the return value of <code>startCoroutine</code> and call <code>this.stopCoroutine(&lt;...&gt;)</code>. All Coroutines are stopped at <code>onDisable</code> / when disabling a component.</p><h2 id="finding-adding-and-removing-components" tabindex="-1"><a class="header-anchor" href="#finding-adding-and-removing-components" aria-hidden="true">#</a> Finding, adding and removing components</h2><p>To access other components, use the static methods on <code>GameObject</code> or <code>this.gameObject</code> methods. For example, to access a <code>Renderer</code> component in the parent use <code>GameObject.getComponentInParent(this.gameObject, Renderer)</code> or <code>this.gameObject.getComponentInParent(Renderer)</code>.</p><p><strong>Example:</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> GameObject<span class="token punctuation">,</span> Renderer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> renderer <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token function">getComponentInParent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">,</span> Renderer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>renderer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="some-of-the-available-methods" tabindex="-1"><a class="header-anchor" href="#some-of-the-available-methods" aria-hidden="true">#</a> Some of the available methods:</h3><table><thead><tr><th>Method</th><th></th></tr></thead><tbody><tr><td><code>GameObject.instantiate(Object3D, InstantiateOptions)</code></td><td>creates a new instance of this object including new instances of all its components</td></tr><tr><td><code>GameObject.destroy(Object3D | Component)</code></td><td>destroy a component or Object3D (and its components)</td></tr><tr><td><code>GameObject.addNewComponent(Object3D, Type)</code></td><td>adds (and creates) a new component for a type to the provided object. Note that <code>awake</code> and <code>onEnable</code> is already called when the component is returned</td></tr><tr><td><code>GameObject.addComponent(Object3D, Component)</code></td><td>moves a component instance to the provided object. It is useful if you already have an instance e.g. when you create a component with e.g. <code>new MyComponent()</code> and then attach it to a object</td></tr><tr><td><code>GameObject.removeComponent(Component)</code></td><td>removes a component from a gameObject</td></tr><tr><td><code>GameObject.getComponent(Object3D, Type)</code></td><td>returns the first component matching a type on the provided object.</td></tr><tr><td><code>GameObject.getComponents(Object3D, Type)</code></td><td>returns all components matching a type on the provided object.</td></tr><tr><td><code>GameObject.getComponentInChildren</code></td><td>same as <code>getComponent</code> but also searches in child objects.</td></tr><tr><td><code>GameObject.getComponentsInChildren</code></td><td>same as <code>getComponents</code> but also searches in child objects.</td></tr><tr><td><code>GameObject.getComponentInParent</code></td><td>same as <code>getComponent</code> but also searches in parent objects.</td></tr><tr><td><code>GameObject.getComponentsInParent</code></td><td>same as <code>getComponents</code> but also searches in parent objects.</td></tr><tr><td><code>GameObject.findObjectOfType</code></td><td>searches the whole scene for a type.</td></tr><tr><td><code>GameObject.findObjectsOfType</code></td><td>searches the whole scene for all matching types.</td></tr></tbody></table><h2 id="three.js-and-the-html-dom" tabindex="-1"><a class="header-anchor" href="#three.js-and-the-html-dom" aria-hidden="true">#</a> Three.js and the HTML DOM</h2>`,10),U={href:"https://developer.mozilla.org/en-US/docs/Web/Web_Components",target:"_blank",rel:"noopener noreferrer"},G=e("br",null,null,-1),P=e("code",null,"<needle-engine>",-1),A=e("em",null,"index.html",-1),F=e("code",null,"<needle-engine>",-1),z=e("code",null,"this.context.domElement",-1),B=a(`<p>This architecture allows for potentially having multiple needle WebGL scenes on the same webpage, that can either run on their own or communicate between each other as parts of your webpage.</p><h3 id="access-the-scene" tabindex="-1"><a class="header-anchor" href="#access-the-scene" aria-hidden="true">#</a> Access the scene</h3><p>To access the current scene from a component you use <code>this.scene</code> which is equivalent to <code>this.context.scene</code>, this gives you the root three.js scene object.</p><p>To traverse the hierarchy from a component you can either iterate over the children of an object<br> with a for loop:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>children<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> 
    <span class="token keyword">const</span> ch <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>or you can iterate using the <code>foreach</code> equivalent:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),M={href:"https://threejs.org/docs/#api/en/core/Object3D.traverse",target:"_blank",rel:"noopener noreferrer"},L=e("code",null,"traverse",-1),Y=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>obj <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),V={href:"https://threejs.org/docs/#api/en/core/Object3D.traverseVisible",target:"_blank",rel:"noopener noreferrer"},J=e("code",null,"traverseVisible",-1),W=a(`<p>Another option that is quite useful when you just want to iterate objects being renderable you can query all renderer components and iterate over them like so:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> renderer <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gameObject<span class="token punctuation">.</span><span class="token function">getComponentsInChildren</span><span class="token punctuation">(</span>Renderer<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>renderer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>For more information about getting components see the next section.</p><h3 id="time" tabindex="-1"><a class="header-anchor" href="#time" aria-hidden="true">#</a> Time</h3><p>Use <code>this.context.time</code> to get access to time data:</p><ul><li><code>this.context.time.time</code> is the time since the application started running</li><li><code>this.context.time.deltaTime</code> is the time that has passed since the last frame</li><li><code>this.context.time.frameCount</code> is the number of frames that have passed since the application started</li><li><code>this.context.time.realtimeSinceStartup</code> is the unscaled time since the application has started running</li></ul><p>It is also possible to use <code>this.context.time.timeScale</code> to deliberately slow down time for e.g. slow motion effects.</p><h3 id="input" tabindex="-1"><a class="header-anchor" href="#input" aria-hidden="true">#</a> Input</h3><p>Use <code>this.context.input</code> to poll input state:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyScript</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span>
<span class="token punctuation">{</span>
    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">getPointerDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;POINTER DOWN&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also subscribe to events in the <code>InputEvents</code> enum like so:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> InputEvents <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyScript</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span>
<span class="token punctuation">{</span>
    <span class="token function">onEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>InputEvents<span class="token punctuation">.</span>PointerDown<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onPointerDown<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">onDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// it is recommended to also unsubscribe from events when your component becomes inactive</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>InputEvents<span class="token punctuation">.</span>PointerDown<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onPointerDown<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token function-variable function">onPointerDown</span> <span class="token operator">=</span> <span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),H={href:"https://developer.mozilla.org/en-US/docs/Web/Events",target:"_blank",rel:"noopener noreferrer"},K=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;MOUSE CLICK&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Note that in this case you have to handle all cases yourself. For example you may need to use different events if your user is visiting your website on desktop vs mobile vs a VR device. These cases are automatically handled by the Needle Engine input events (e.g. <code>PointerDown</code> is raised both for mouse down, touch down and in case of VR on controller button down).</p><h3 id="physics" tabindex="-1"><a class="header-anchor" href="#physics" aria-hidden="true">#</a> Physics</h3><p>Use <code>this.context.physics.raycast()</code> to perform a raycast and get a list of intersections. If you dont pass in any options the raycast is performed from the mouse position (or first touch position) in screenspace using the currently active <code>mainCamera</code>. You can also pass in a <code>RaycastOptions</code> object that has various settings like <code>maxDistance</code>, the camera to be used or the layers to be tested against.</p>`,4),Q=e("code",null,"this.context.physics.raycastFromRay(your_ray)",-1),X={href:"https://threejs.org/docs/#api/en/math/Ray",target:"_blank",rel:"noopener noreferrer"},Z=a(`<p>Note that the calls above are by default raycasting against visible scene objects. That is different to Unity where you always need colliders to hit objects. The default three.js solution has both pros and cons where one major con is that it can perform quite slow depending on your scene geometry. It may be especially slow when raycasting against skinned meshes. It is therefor recommended to usually set objects with SkinnedMeshRenderers in Unity to the <code>Ignore Raycast</code> layer which will then be ignored by default by Needle Engine as well.</p><p>Another option is to use the physics raycast methods which will only return hits with colliders in the scene.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> hit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span>physics<span class="token punctuation">.</span>engine<span class="token operator">?.</span><span class="token function">raycast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),$={href:"https://stackblitz.com/edit/needle-engine-physics-raycast-example?file=src%2Fmain.ts,package.json,.gitignore",target:"_blank",rel:"noopener noreferrer"},nn=e("h3",{id:"networking",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#networking","aria-hidden":"true"},"#"),n(" Networking")],-1),en=e("code",null,"this.context.connection",-1),sn=a(`<h2 id="accessing-needle-engine-and-components-from-anywhere" tabindex="-1"><a class="header-anchor" href="#accessing-needle-engine-and-components-from-anywhere" aria-hidden="true">#</a> Accessing Needle Engine and components from anywhere</h2><p>It is possible to access all the functionality described above using regular JavaScript code that is not inside components and lives somewhere else. All the components and functionality of the needle runtime is accessible via the global <code>Needle</code> namespace (you can write <code>console.log(Needle)</code> to get an overview)</p><p>You can find components using <code>Needle.findObjectOfType(Needle.AudioSource)</code> for example. It is recommended to cache those references, as searching the whole scene repeatedly is expensive. See the list for <a href="#finding-adding-and-removing-components">finding adding and removing components</a> above.</p><p>For getting callbacks for the initial scene load see the following example:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>needle<span class="token operator">-</span>engine loadstart<span class="token operator">=</span><span class="token string">&quot;loadingStarted&quot;</span> progress<span class="token operator">=</span><span class="token string">&quot;loadingProgress&quot;</span> loadfinished<span class="token operator">=</span><span class="token string">&quot;loadingFinished&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>needle<span class="token operator">-</span>engine<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
<span class="token keyword">function</span> <span class="token function">loadingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;START&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">loadingProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;LOADING...&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">loadingFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;FINISHED!&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also subscribe to the globale <code>NeedleEngine</code> to receive a callback when a Needle Engine context has been created:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>NeedleEngine<span class="token punctuation">.</span><span class="token function">addContextCreatedCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> context <span class="token operator">=</span> args<span class="token punctuation">.</span>context<span class="token punctuation">;</span>
  <span class="token keyword">const</span> scene <span class="token operator">=</span> context<span class="token punctuation">.</span>scene<span class="token punctuation">;</span>
  <span class="token keyword">const</span> myInstance <span class="token operator">=</span> GameObject<span class="token punctuation">.</span><span class="token function">getComponentInChildren</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> YourComponentType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="serialization-components-in-gltf-files" tabindex="-1"><a class="header-anchor" href="serialization-components-in-gltf-files" aria-hidden="true">#</a> Serialization / Components in glTF files</h2><p>To embed components and recreate components with their correct types in glTF, we also need to save non-primitive types (everything that is not a <code>Number</code>, <code>Boolean</code> or <code>String</code>). You can do so is adding a <code>@serializable(&lt;type&gt;)</code> decorator above your field or property.</p><p><strong>Example:</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> serializable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Object3D <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;three&quot;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>
    <span class="token comment">// this will be a &quot;Transform&quot; field in Unity</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>Object3D<span class="token punctuation">)</span> 
    myObjectReference<span class="token operator">:</span> Object3D <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    
    <span class="token comment">// this will be a &quot;Transform&quot; array field in Unity</span>
    <span class="token comment">// Note that the @serializable decorator contains the array content type! (Object3D and not Object3D[])</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>Object3D<span class="token punctuation">)</span> 
    myObjectReferenceList<span class="token operator">:</span> Object3D<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To serialize from and to custom formats, it is possible to extend from the <code>TypeSerializer</code> class and create an instance. Use <code>super()</code> in the constructor to register supported types.</p><blockquote><p><strong>Note</strong>: In addition to matching fields, matching properties will also be exported when they match to fields in the typescript file.</p></blockquote><h2 id="loading-scenes" tabindex="-1"><a class="header-anchor" href="#loading-scenes" aria-hidden="true">#</a> Loading Scenes</h2>`,14),an={href:"https://docs.unity3d.com/Packages/com.unity.addressables@latest/manual/AddressableAssetsGettingStarted.html",target:"_blank",rel:"noopener noreferrer"},tn=e("code",null,"AssetReferences",-1),on=a(`<p>These exported gltf files will be serialized as plain string URIs. To simplify loading these from TypeScript components, we added the concept of <code>AssetReference</code> types. They can be loaded at runtime and thus allow to defer loading parts of your app or loading external content.</p><p><strong>Example:</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Behaviour<span class="token punctuation">,</span> serializable<span class="token punctuation">,</span> AssetReference <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@needle-tools/engine&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">extends</span> <span class="token class-name">Behaviour</span> <span class="token punctuation">{</span>

    <span class="token comment">// if you export a prefab or scene as a reference from Unity you&#39;ll get a path to that asset</span>
    <span class="token comment">// which you can de-serialize to AssetReference for convenient loading</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">serializable</span></span><span class="token punctuation">(</span>AssetReference<span class="token punctuation">)</span>
    myPrefab<span class="token operator">?</span><span class="token operator">:</span> AssetReference<span class="token punctuation">;</span>
    
    <span class="token keyword">async</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// directly instantiate</span>
      <span class="token keyword">const</span> myInstance <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myPrefab<span class="token operator">?.</span><span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// you can also just load and instantiate later</span>
      <span class="token comment">// const myInstance = await this.myPrefab.loadAssetAsync();</span>
      <span class="token comment">// this.gameObject.add(myInstance)</span>
      <span class="token comment">// this is useful if you know that you want to load this asset only once because it will not create a copy</span>
      <span class="token comment">// since \`\`instantiate()\`\` does create a copy of the asset after loading it</span>
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AssetReferences are cached by URI, so if you reference the same exported glTF/Prefab in multiple components/scripts it will only be loaded once and then re-used.</p><h2 id="for-unity-devs" tabindex="-1"><a class="header-anchor" href="#for-unity-devs" aria-hidden="true">#</a> For Unity Devs</h2><p>If you are a Unity dev and want to learn more about typescript and Needle Engine you can also learn more in <a href="./getting-started/for-unity-developers">Needle Engine for Unity developers</a> 😊</p>`,6);function cn(pn,ln){const o=i("RouterLink"),t=i("ExternalLinkIcon");return l(),r("div",null,[u,e("ul",null,[e("li",null,[s(o,{to:"/getting-started/typescript-essentials.html"},{default:c(()=>[n("Typescript Essentials")]),_:1})]),e("li",null,[s(o,{to:"/getting-started/for-unity-developers.html"},{default:c(()=>[n("Needle Engine for Unity Developers")]),_:1})])]),m,e("p",null,[n("Runtime code for Needle Engine is written in "),e("a",h,[n("TypeScript"),s(t)]),n(" (recommended) or "),e("a",k,[n("JavaScript"),s(t)]),n(". We automatically generate C# stub components out of that, which you can add to GameObjects in the editor. The C# components and their data are recreated by the runtime as JavaScript components with the same data and attached to three.js objects.")]),e("p",null,[n("Both custom components as well as built-in Unity components can be mapped to JavaScript components in this way. For example, mappings for many built-in components related to animation, rendering or physics are already "),s(o,{to:"/component-reference.html#unity-components"},{default:c(()=>[n("included in Needle Engine")]),_:1}),n(".")]),v,e("ul",null,[e("li",null,[e("a",b,[n("Create virtual workspace to code along"),s(t)]),n(".")])]),g,e("ul",null,[y,e("li",null,[e("p",null,[n("Unity specific:"),f,n(" Organize your code into NPM Definition Files (npm packages). These help you to modularize and re-use code between projects and if you are familiar with web development they are in fact regular npm packages that are installed locally."),w,n(" In Unity you can create NpmDef files via "),_,n(" and then add TypeScript files by right-clicking an NpmDef file and selecting "),x,n(". Please see "),s(o,{to:"/project-structure.html#npm-definition-files"},{default:c(()=>[n("this chapter")]),_:1}),n(" for more information.")])])]),j,C,e("p",null,[n("If you are new to writing Javascript or Typescript we recommend reading the "),s(o,{to:"/getting-started/typescript-essentials.html"},{default:c(()=>[n("Typescript Essentials Guide")]),_:1}),n(" guide first before continuing with this guide.")]),O,e("details",T,[q,e("p",null,[n("Refer to the "),s(o,{to:"/getting-started/typescript-essentials.html"},{default:c(()=>[n("Typescript Essentials Guide")]),_:1}),n(" to learn more about the syntax and language.")]),E]),N,e("p",null,[n("Coroutines can be declared using the "),e("a",D,[n("JavaScript Generator Syntax"),s(t)]),n("."),S,n(" To start a coroutine, call "),I]),R,e("p",null,[n("The context refers to the runtime inside a "),e("a",U,[n("web component"),s(t)]),n("."),G,n(" The three.js scene lives inside a custom HTML component called "),P,n(" (see the "),A,n(" in your project). You can access the "),F,n(" web component using "),z,n(".")]),B,e("p",null,[n("You can also use three.js specific methods to quickly iterate all objects recursively using the "),e("a",M,[L,s(t)]),n(" method:")]),Y,e("p",null,[n("or to just traverse visible objects use "),e("a",V,[J,s(t)]),n(" instead.")]),W,e("p",null,[n("If you want to handle inputs yourself you can also subscribe to "),e("a",H,[n("all events the browser provides"),s(t)]),n(" (there are a ton). For example to subscribe to the browsers click event you can write:")]),K,e("p",null,[n("Use "),Q,n(" to perform a raycast using a "),e("a",X,[n("three.js ray"),s(t)])]),Z,e("p",null,[n("Here is a editable "),e("a",$,[n("example for physics raycast"),s(t)])]),nn,e("p",null,[n("Networking methods can be accessed via "),en,n(". Please refer to the "),s(o,{to:"/networking.html"},{default:c(()=>[n("networking docs")]),_:1}),n(" for further information.")]),sn,e("p",null,[n("Referenced Prefabs, SceneAssets and "),e("a",an,[tn,s(t)]),n(" in Unity will automatically be exported as glTF files (please refer to the "),s(o,{to:"/export.html"},{default:c(()=>[n("Export Prefabs")]),_:1}),n(" documentation).")]),on])}const dn=p(d,[["render",cn],["__file","scripting.html.vue"]]);export{dn as default};
